{"version":3,"sources":["webpack:///src/components/Cashier.vue","webpack:///./src/components/Cashier.vue?f7b9","webpack:///./src/components/Cashier.vue","webpack:///./node_modules/exif-js/exif.js"],"names":["Cashier","data","headerImage","imgUrl","methods","copy","input","document","createElement","body","appendChild","setAttribute","this","select","execCommand","removeChild","lib","success","update","e","judge","target","getAttribute","files","dataTransfer","length","picValue","imgPreview","file","self","Orientation","exif_default","a","getData","getTag","window","FileReader","test","type","reader","readAsDataURL","onloadend","result","img","Image","src","postImg","onload","compress","_this","param","FormData","append","name","$axios","post","headers","Content-Type","then","response","imageUrl","rotateImg","direction","canvas","height","width","step","degree","Math","PI","ctx","getContext","drawImage","rotate","tCanvas","tctx","ratio","sqrt","fillStyle","fillRect","count","nw","nh","i","j","ndata","toDataURL","created","watch","$route","components_Cashier","render","_vm","_h","$createElement","_c","_self","staticClass","_v","attrs","accept","on","change","$event","click","_s","alt","staticStyle","opacity","id","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","debug","EXIF","obj","EXIFwrapped","module","exports","ExifTags","Tags","36864","40960","40961","40962","40963","37121","37122","37500","37510","40964","36867","36868","37520","37521","37522","33434","33437","34850","34852","34855","34856","37377","37378","37379","37380","37381","37382","37383","37384","37385","37396","37386","41483","41484","41486","41487","41488","41492","41493","41495","41728","41729","41730","41985","41986","41987","41988","41989","41990","41991","41992","41993","41994","41995","41996","40965","42016","TiffTags","256","257","34665","34853","258","259","262","274","277","284","530","531","282","283","296","273","278","279","513","514","301","318","319","529","532","306","270","271","272","305","315","33432","GPSTags","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","IFD1Tags","StringValues","ExposureProgram","MeteringMode","255","LightSource","Flash","31","32","65","69","71","73","77","79","89","93","95","SensingMethod","SceneCaptureType","SceneType","CustomRendered","WhiteBalance","GainControl","Contrast","Saturation","Sharpness","SubjectDistanceRange","FileSource","Components","imageHasData","getImageData","callback","handleBinaryFile","binFile","findEXIFinJPEG","exifdata","iptcdata","dataView","DataView","console","log","byteLength","getUint8","offset","isFieldSegmentStart","nameHeaderLength","startOffset","sectionLength","getUint16","readIPTCData","findIPTCinJPEG","isXmpEnabled","xmpdata","dom","DOMParser","getStringFromDB","xmpString","xmpEndIndex","indexOf","indexOfXmp","substring","slice","domDocument","parseFromString","xml2Object","findXMPinJPEG","call","base64","contentType","match","replace","binary","atob","len","buffer","ArrayBuffer","view","Uint8Array","charCodeAt","base64ToArrayBuffer","fileReader","url","http","XMLHttpRequest","open","responseType","status","send","objectURLToBlob","blob","readAsArrayBuffer","Blob","File","marker","readEXIFData","IptcFieldMap","120","110","55","80","85","122","105","116","fieldValue","fieldName","dataSize","segmentType","segmentStartPos","getInt16","hasOwnProperty","Array","push","readTags","tiffStart","dirStart","strings","bigEnd","entryOffset","tag","entries","tags","readTagValue","vals","val","n","numerator","denominator","numValues","getUint32","valueOffset","Number","getInt32","start","outstr","String","fromCharCode","exifData","gpsData","tiffOffset","firstIFDOffset","ExifIFDPointer","GPSInfoIFDPointer","IFD1OffsetPointer","getNextIFDOffset","thumbTags","JpegIFOffset","JpegIFByteCount","tOffset","tLength","readThumbnailImage","xml2json","xml","json","nodeType","attributes","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","child","old","children","idx","itemAtt","dataKey","dataValue","undefined","textContent","message","enableXmp","disableXmp","HTMLImageElement","complete","getIptcTag","getAllTags","getAllIptcTags","pretty","strPretty","readFromBinaryFile","apply"],"mappings":"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","file":"static/js/0.96f0161a9f4b9580b9a4.js","sourcesContent":["<template>\n  <div class=\"Cashier\">\n     <div class=\"top\">\n       <div class=\"btn\">\n         上传图片\n        <input type=\"file\" name=\"file\" class=\"MaxInput\" accept=\"image/image\" @change=\"update($event)\">\n       </div>\n       <div class=\"btn p\" @click=\"copy()\">{{imgUrl}}</div>\n     </div>\n      <div class=\"img\">\n        <img :src=\"headerImage\" alt=\"\">\n      </div>\n    <textarea id=\"input\" style=\"opacity: 0;width: 0;height: 0;\"></textarea>\n  </div>\n</template>\n<script>\n  import { Toast } from 'we-vue'\n  import Exif from 'exif-js'\n  export default {\n    data() {\n      return {\n        headerImage:\"\",\n        imgUrl:'暂无地址'\n      }\n    },\n    methods: {\n      copy(){\n        const input = document.createElement('input');\n        document.body.appendChild(input);\n        input.setAttribute('value',this.imgUrl);\n        input.select();\n        if (document.execCommand('copy')) {\n          document.execCommand('copy')\n        }\n        document.body.removeChild(input);\n        Toast.success('复制成功！');\n      },\n      update(e) {\n        this.judge = e.target.getAttribute('data-number');\n        let files = e.target.files || e.dataTransfer.files;\n        if (!files.length) return;\n        this.picValue = files[0];\n        this.imgPreview(this.picValue);\n      },\n      imgPreview(file) {\n        let self = this;\n        let Orientation;\n        //去获取拍照时的信息，解决拍出来的照片旋转问题\n        Exif.getData(file, function () {\n          Orientation = Exif.getTag(this,'Orientation');\n        });\n        // 看支持不支持FileReader\n        if (!file || !window.FileReader) return;\n\n        if (/^image/.test(file.type)) {\n          // 创建一个reader\n          let reader = new FileReader(file);\n          // 将图片2将转成 base64 格式\n          reader.readAsDataURL(file);\n          // 读取成功后的回调\n          reader.onloadend = function () {\n            let result = this.result;\n            let img = new Image();\n            img.src = result;\n            //判断图片是否大于100K,是就直接上传，反之压缩图片\n            if (this.result.length <= (100 * 1024)) {\n              self.headerImage = this.result;\n              self.postImg();\n            } else {\n              img.onload = function () {\n                let data = self.compress(img, Orientation);\n                self.headerImage = data;\n                self.postImg();\n              }\n            }\n          }\n        }\n      },\n      postImg(e) {\n        let file = this.picValue;\n        let param = new FormData(); //创建form对象\n        param.append('file', file, file.name);//通过append向form对象添加数据\n        param.append('source', '1');\n        param.append('mid', '1');\n        param.append('alias', '1');\n        let config = {\n          headers: {'Content-Type': 'multipart/form-data'}\n        };  //添加请求头\n        this.$axios.post('/file-manage/file/single', param, config).then(response => {\n          let imgUrl = response.imageUrl;\n          this.imgUrl=imgUrl;\n        })\n      },\n      rotateImg(img, direction, canvas) {\n        //最小与最大旋转方向，图片旋转4次后回到原方向\n        const min_step = 0;\n        const max_step = 3;\n        if (img == null) return;\n        //img的高度和宽度不能在img元素隐藏后获取，否则会出错\n        let height = img.height;\n        let width = img.width;\n        let step = 2;\n        if (step == null) {\n          step = min_step;\n        }\n        if (direction == 'right') {\n          step++;\n          //旋转到原位置，即超过最大值\n          step > max_step && (step = min_step);\n        } else {\n          step--;\n          step < min_step && (step = max_step);\n        }\n        //旋转角度以弧度值为参数\n        let degree = step * 90 * Math.PI / 180;\n        let ctx = canvas.getContext('2d');\n        switch (step) {\n          case 0:\n            canvas.width = width;\n            canvas.height = height;\n            ctx.drawImage(img, 0, 0);\n            break;\n          case 1:\n            canvas.width = height;\n            canvas.height = width;\n            ctx.rotate(degree);\n            ctx.drawImage(img, 0, -height);\n            break;\n          case 2:\n            canvas.width = width;\n            canvas.height = height;\n            ctx.rotate(degree);\n            ctx.drawImage(img, -width, -height);\n            break;\n          case 3:\n            canvas.width = height;\n            canvas.height = width;\n            ctx.rotate(degree);\n            ctx.drawImage(img, -width, 0);\n            break;\n        }\n      },\n      compress(img, Orientation) {\n        let canvas = document.createElement(\"canvas\");\n        let ctx = canvas.getContext('2d');\n        //瓦片canvas\n        let tCanvas = document.createElement(\"canvas\");\n        let tctx = tCanvas.getContext(\"2d\");\n        let initSize = img.src.length;\n        let width = img.width;\n        let height = img.height;\n        //如果图片大于四百万像素，计算压缩比并将大小压至400万以下\n        let ratio;\n        if ((ratio = width * height / 1000000) > 1) {\n          ratio = Math.sqrt(ratio);\n          width /= ratio;\n          height /= ratio;\n        } else {\n          ratio = 1;\n        }\n        canvas.width = width;\n        canvas.height = height;\n        //        铺底色\n        ctx.fillStyle = \"#fff\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        //如果图片像素大于100万则使用瓦片绘制\n        let count;\n        if ((count = width * height / 1000000) > 1) {\n          count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片\n          //            计算每块瓦片的宽和高\n          let nw = ~~(width / count);\n          let nh = ~~(height / count);\n          tCanvas.width = nw;\n          tCanvas.height = nh;\n          for (let i = 0; i < count; i++) {\n            for (let j = 0; j < count; j++) {\n              tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\n              ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\n            }\n          }\n        } else {\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n        //修复ios上传图片的时候 被旋转的问题\n        if (Orientation != \"\" && Orientation != 1) {\n          switch (Orientation) {\n            case 6://需要顺时针（向左）90度旋转\n              this.rotateImg(img, 'left', canvas);\n              break;\n            case 8://需要逆时针（向右）90度旋转\n              this.rotateImg(img, 'right', canvas);\n              break;\n            case 3://需要180度旋转\n              this.rotateImg(img, 'right', canvas);//转两次\n              this.rotateImg(img, 'right', canvas);\n              break;\n          }\n        }\n        //进行最小压缩\n        let ndata = canvas.toDataURL('image/jpeg', 0.1);\n        tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\n        return ndata;\n      },\n    },\n    created: function () {},\n    watch: {\n      // 监测路由变化,只要变化了就调用获取路由参数方法将数据存储本组件即可\n      '$route': 'getParams'\n    }\n  }\n</script>\n<style scoped>\n  .Cashier{padding:30px;width:720px;box-sizing: border-box;margin: 0 auto;}\n  .Cashier .top .btn{display: inline-block;height: 38px;line-height: 38px;padding: 0 18px;background-color: #009688;position: relative;\n    color: #fff;white-space: nowrap;text-align: center;font-size: 14px;border: none;border-radius: 2px;cursor: pointer;width: 10%}\n  .Cashier .top .btn input{opacity: 0;width:100%;height: 100%;position: absolute;top:0;left: 0;}\n  .Cashier .top .p{background:#fff;border:1px solid #eee;width:77%;color:#999;}\n  .Cashier .img{margin: 0 auto;padding:10px 0 0 0;overflow: auto;}\n  .Cashier .img img{margin: 0 auto;display: block}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Cashier.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"Cashier\"},[_c('div',{staticClass:\"top\"},[_c('div',{staticClass:\"btn\"},[_vm._v(\"\\n       上传图片\\n      \"),_c('input',{staticClass:\"MaxInput\",attrs:{\"type\":\"file\",\"name\":\"file\",\"accept\":\"image/image\"},on:{\"change\":function($event){_vm.update($event)}}})]),_vm._v(\" \"),_c('div',{staticClass:\"btn p\",on:{\"click\":function($event){_vm.copy()}}},[_vm._v(_vm._s(_vm.imgUrl))])]),_vm._v(\" \"),_c('div',{staticClass:\"img\"},[_c('img',{attrs:{\"src\":_vm.headerImage,\"alt\":\"\"}})]),_vm._v(\" \"),_c('textarea',{staticStyle:{\"opacity\":\"0\",\"width\":\"0\",\"height\":\"0\"},attrs:{\"id\":\"input\"}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-77ba1b7c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Cashier.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-77ba1b7c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Cashier.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Cashier.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Cashier.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-77ba1b7c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Cashier.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-77ba1b7c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Cashier.vue\n// module id = null\n// module chunks = ","(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            img.exifdata = data || {};\n            var iptcdata = findIPTCinJPEG(binFile);\n            img.iptcdata = iptcdata || {};\n            if (EXIF.isXmpEnabled) {\n               var xmpdata= findXMPinJPEG(binFile);\n               img.xmpdata = xmpdata || {};               \n            }\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2json(xml) {\n        var json = {};\n      \n        if (xml.nodeType == 1) { // element node\n          if (xml.attributes.length > 0) {\n            json['@attributes'] = {};\n            for (var j = 0; j < xml.attributes.length; j++) {\n              var attribute = xml.attributes.item(j);\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n            }\n          }\n        } else if (xml.nodeType == 3) { // text node\n          return xml.nodeValue;\n        }\n      \n        // deal with children\n        if (xml.hasChildNodes()) {\n          for(var i = 0; i < xml.childNodes.length; i++) {\n            var child = xml.childNodes.item(i);\n            var nodeName = child.nodeName;\n            if (json[nodeName] == null) {\n              json[nodeName] = xml2json(child);\n            } else {\n              if (json[nodeName].push == null) {\n                var old = json[nodeName];\n                json[nodeName] = [];\n                json[nodeName].push(old);\n              }\n              json[nodeName].push(xml2json(child));\n            }\n          }\n        }\n        \n        return json;\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.enableXmp = function() {\n        EXIF.isXmpEnabled = true;\n    }\n\n    EXIF.disableXmp = function() {\n        EXIF.isXmpEnabled = false;\n    }\n\n    EXIF.getData = function(img, callback) {\n        if (((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('exif-js', [], function() {\n            return EXIF;\n        });\n    }\n}.call(this));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/exif-js/exif.js\n// module id = sbrb\n// module chunks = 0"],"sourceRoot":""}